# Project template
- layout: top-middle
  name: Hardware Control with Serial Parsing Microcontroller for Autonomous Racing
  # link: https://github.com/Autonomous-Motorsports-Purdue/AMP_MCUv1
  github: Autonomous-Motorsports-Purdue/AMP_MCUv1
  quote: >
    Arduino based microntroller program for controlling low level electronics of autonomous go kart
  description: | # this will include new lines to allow paragraphs
    The purpose of this project is to implement a serial parsing microcontroller system to operate the steering,
    throttle, and braking functionality of the Autonomous Motorsport Purdue (AMP) go-kart. Autonomous racing has
    grown in popularity as more teams work to solve the unique problem of autonomous decision making at very high
    speeds.  Our sub-team is working with the low-level electrical hardware on our modified go-kart, mainly focusing
    on parsing data from the onboard computer and distributing signals to other electronics such as the motor controller,
    linear actuator, and servos. To do this, the microcontroller receives custom serial packets from the go kartâ€™s
    computer to enable and then control the steering angle, throttle intensity, and brake position. The steering angle
    is set with a pulse width modulated (PWM) signal from the microcontroller.  The throttle is controlled via the digital
    to analog converter (DAC) and the braking is set via digital signals. To reduce processing time the serial structure
    was designed to use byte long data instead of floating-point values because the microcontroller does not have dedicated
    floating-point hardware. Furthermore, we implemented various error handling methods for packet transmission such as
    cyclic redundancy check. This project is currently in its initial testing phase. We are testing the integration of our
    subsystems by controlling the serial input using a custom javascript-based simulator. The ultimate goal of this project
    is to have a fully autonomous go-kart that can navigate any track environment at the maximum speed possible.
  videos:
    - video: https://www.youtube.com/embed/CATtHCXGsZI
      video_title: AMP Electrical Full Integration Demonstration
  photos:
    - photo: ./assets/AMP/AMP_Group.png
      photo_title: AMP Group Picture
      photo_type: card card-big
    - photo: ./assets/AMP/AMP_Kart.jpg
      photo_title: AMP Go-Kart Picture
      photo_type: card card-wide
    - photo: ./assets/AMP/AMP_PCB.png
      photo_title: AMP PCB Picture
      photo_type: card card
    - photo: ./assets/AMP/AMP_Expo_Certificate.png
      photo_title: AMP PCB Picture
      photo_type: card card
- layout: top-middle
  name: High Speed Force Sensor Datalogger
  # link: https://github.com/MArndt26/PNG_Datalogger
  github: MArndt26/PNG_Datalogger
  quote: >
    Datalogger for PNG Research using the Teensy 4.1 development board
  description: | # this will include new lines to allow paragraphs
    Purdue Neurological Group (PNG) is involved in many different research projects, one of which involves measuring the 
    effects of head trauma in athletes. More specifically, football helmet collisions. The goal of the project in regards 
    to this repository is to design and implement high-speed data collection circuitry to measure the forces that take place 
    during one of these football impacts (tackles). "Data collection circuitry" refers to the following:
      * A microcontroller to read in analog inputs through an ADC
      * Variable resistance strain gauges to measure forces
      * Analog multiplexers to route 6 different signals into the microcontroller
      * Differential amplifier / Wheatstone bridge to convert the sensor resistance changes into changes in voltage.
      * SD card to record the data

    My contribution to this effort involves designing and programming the force collecting circuitry.  There is a long history
    for this project that can be seen [here](https://github.com/MArndt26/PNG_Datalogger#project-history).
  photos:
    - photo: ./assets/png_datalogger/helmet_setup.jpg
      photo_title: test here for the description
      photo_type: card card-wide
    - photo: ./assets/png_datalogger/helmet_closeup.jpg
      photo_title: test here for the description
      photo_type: card
    - photo: ./assets/png_datalogger/bend_device.jpg
      photo_title: test here for the description
      photo_type: card
    - photo: ./assets/png_datalogger/breadboard.jpg
      photo_title: test here for the description
      photo_type: card card-big
    - photo: ./assets/png_datalogger/strain_gaug_plot.jpg
      photo_title: test here for the description
      photo_type: card card-wide
    - photo: ./assets/png_datalogger/test_setup.jpg
      photo_title: test here for the description
      photo_type: card card-wide

- layout: top-middle
  name: AMP Jetson Serial Simulator
  # link: https://github.com/Autonomous-Motorsports-Purdue/AMP-Jetson-Serial-Sim
  github: https://github.com/Autonomous-Motorsports-Purdue/AMP-Jetson-Serial-Sim
  quote: >
    Electron based serial simulator for testing serial communication between the Jetson and Arduino MCU.
  description: | # this will include new lines to allow paragraphs
    This Project is used to interface with the microcontroller for the Autonomous Motorsport Purdue go-kart. A key issue 
    for the AMP team is the allocation of resources between the subteams.  Due to the tight integration
    of our systems, both Electrical and Software sub-teams require access to the kart's main computer (Nvidia Jetson)
    and the electrical controller (Arduino MCU) for development/debugging tasks.  To solve this issue, I created 
    this Jetson Serial Simulator program.  This software takes the place of the Jetson which allows for full electrical
    integration testing, without the need to schedule time with the physical Jetson computer.
  videos:
    - video: https://www.youtube.com/embed/daYhBjnEbTU
      video_title: AMP Jetson Serial Simulator Demonstration

- layout: top-middle
  name: Microcontroller Retro Game Console
  # link: https://github.com/MArndt26/E3-Auto-Dispenser
  github: MArndt26/MCU_Flappy_Bird
  quote: >
    Microcontroller Controlled Flappy Bird Game Console
  description: | # this will include new lines to allow paragraphs
    This project used multiple periferal systsems of a STM32 microcontroller to recreate the infamous flappy bird game.
    The system shows the main content through an LCD display controlled through SPI communication with the microcontroller.
    There is also an additional 7 segment display to update the user's score.  Finally, game music (the Tetris Theme Song)
    is output to the user by passing a variable duty cycle PWM signal through a hardware low pass filter.
  photos:
    - photo: ./assets/Flappy/full_board.jpg
      photo_title: box external
      photo_type: card card-big
    - photo: ./assets/Flappy/screen.jpg
      photo_title: box internal
      photo_type: card card-tall
    - photo: ./assets/Flappy/score.jpg
      photo_title: Adheasive Pump
      photo_type: card
  videos:
    - video: https://www.youtube.com/embed/S5TemZ1Fc4k
      video_title: Flappy Bird Game Console Demonstration

- layout: top-middle
  name: E3 Auto Adheasive Dispenser
  # link: https://github.com/MArndt26/E3-Auto-Dispenser
  github: MArndt26/E3-Auto-Dispenser
  quote: >
    Automated Control System for Display Adheasive Dispenser
  description: | # this will include new lines to allow paragraphs
    This Project is used to create a control pad and scale to dispense adhesive until a weight limit is reached.
    E3 Displays uses various manufacturing processes when fabricating the customized display stacks for its customers.
    One of these processes involves using precise amounts of adhesive for bonding displays to cover glass.  In the past,
    this has been a manual process, requiring operators to spend large amounts of time preparing the adhesive for the bonding
    process.  This project automates this by bundling all the prep work into one location, controlled electronically.

  photos:
    - photo: ./assets/E3/box_external.jpg
      photo_title: box external
      photo_type: card
    - photo: ./assets/E3/box_internal.jpg
      photo_title: box internal
      photo_type: card card-big
    - photo: ./assets/E3/pump.jpg
      photo_title: Adheasive Pump
      photo_type: card card-tall
