# Project template
- layout: top-middle
  name: UVM Caches
  link: https://github.com/Purdue-SoCET/RISCVBusiness/tree/Caches/verification/uvm/caches
  # github: RISCVBusiness
  quote: >
    UVM Verification for Two-Stage Cache Hierarchy of RISCV Processor
  description: | # this will include new lines to allow paragraphs
    The purpose of the Cache UVM Testbench project was to create a modular, reusable framework of testing components for the memory hierarchy for Purdue SoCET's RISCV Processor core.  The main parts of the testbench can be split into the following components: Bus Agent, Bus Scoreboard/Predictor, and End2End Checker.  The Bus Agent provides the core interfacing logic to communicate abstract cpu-transactions to the memory hierarchy.  This involves reads, writes, and flush operations.  The Bus Agent is extended to create a CPU Agent that drives these processor transactions to stress the various features of the RTL design.  The Bus Scoreboard and Predictor pair to check the input side of any memory device (L1 cache, L2 cache, memory BFM).  The End2End Checker ensures the proper translation of transactions as they propagate throughout the memory hierarchy.
  photos:
    - photo: ./assets/SoCET/L2-Presentation-Top.png
      photo_title: L2 Top Level Diagram
      photo_type: card card-big
    - photo: ./assets/SoCET/L2_UVM.png
      photo_title: L2 UVM
      photo_type: card card-wide
    - photo: ./assets/SoCET/Multicore_UVM.png
      photo_title: Multicore UVM
      photo_type: card card-wide

- layout: top-middle
  name: Dual Core Microprocessor Design
  quote: >
    Pipelined Dual Core with Instruction, Data Cache, and Branch Prediction through BTB
  description: | # this will include new lines to allow paragraphs
    This project is the result of an iterative design laboratory at Purdue University aimed at designing a microprocessor for the MIPS Instruction Set using System Verilog.  The design started with a basic single cycle datapath.  Following this, the datapath was split into Fetch, Decode, Execute, Memory, and Writeback stages for a simplified single core pipelined processor.  From there, the following upgrades where added to the design: Hazard Detection, Forwarding, Memory Arbitration, Caching with a 2 way set associative data cache with LRU replacement and a direct mapped instruction cache, Branch Prediction using a Branch Table Buffer with 2-bit entries.  At this point, the design branched from a single core to a multiprocessor with two identical cores.  The coherency model was based on the MSI protocol with slight alterations such as cache to cache transfer for better memory access times.  Furthermore, the multicore datapath was modified to include atomic Load-Linked and Store-Conditional operations.  Additionally, parallel assembly code was written to test this system against a MIPS simulator against various algorithms such as MergeSort, Fibonacci, Multiplication through repeated Additions, and thread safe acquire/release lock operations.
  photos:
    - photo: ./assets/ECE437/System_Block_Diagram.png
      photo_title: System Block Diagram
      photo_type: card card-big
    - photo: ./assets/ECE437/Datapath.png
      photo_title: Datapath
      photo_type: card
    - photo: ./assets/ECE437/D_Cache.png
      photo_title: Data Cache
      photo_type: card
    - photo: ./assets/ECE437/I_Cache.png
      photo_title: Instruction Cache
      photo_type: card
    - photo: ./assets/ECE437/BusTransitions.png
      photo_title: Bus Controller State Transitions
      photo_type: card

- layout: top-middle
  name: Sink or be Sunk Embedded Senior Design Project
  link: https://sink-or-be-sunk.github.io/Team_Website/
  github: Sink-or-be-Sunk
  quote: >
    A WiFi Connected, electronic twist on the classic Battleship game
  description: | # this will include new lines to allow paragraphs
    The goal of this project is to create the most engaging and socially distanced version of Battleship, and our team has conceptualized a variety of ways to enhance the game experience while keeping its integrity. The first obstacle is to maintain social distancing. Our team plans to implement a connection between two battery-powered boards via WiFi from the ESP32 and web sockets, allowing for optimal and adjustable distancing. We will use a server to host the code for the gameplay logic, which validates legal plays on both boards. To reinvigorate gameplay, our team will engage with the players through touch, sight, and sound. Players will firmly place or lock-in, their boats on the boards at the beginning of the game and enter coordinates on a key pad to determine the attack location (depending on gameplay selection). For each “attack”, LEDs corresponding to hits or misses will flash on both players’ boards, creating a stronger visual appeal. When a boat is decimated, each setup will vibrate and audibly announce which boat has sunk, which will not only keep players interested but reproduce the incentive to win. Finally, to put a spin on the traditional playing style, we will create a variety of game modes. These different modes will allow players to play casually or competitively, quickly or for longevity. The various play options will further player interest simply by allowing the players to play towards an objective of their choice.
  videos:
    - id: ziMwrT-h9pU
      title: Sink or be Sunk Product Demonstration
  photos:
    - photo: ./assets/Sink-or-be-Sunk/Homepage.png
      photo_title: Home Page
      photo_type: card card-big
    - photo: ./assets/Sink-or-be-Sunk/led_rainbow_demo.gif
      photo_title: LED Rainbow Demo
      photo_type: card card-wide
    - photo: ./assets/Sink-or-be-Sunk/AccountPage.png
      photo_title: Account Page
      photo_type: card
    - photo: ./assets/Sink-or-be-Sunk/DevicePairing.gif
      photo_title: Device Pairing
      photo_type: card
    - photo: ./assets/Sink-or-be-Sunk/Final_ESP32_Render.png
      photo_title: Final ESP32 Render
      photo_type: card card-big
    - photo: ./assets/Sink-or-be-Sunk/grid_demo.gif
      photo_title: LED Grid Demo
      photo_type: card card-wide
    - photo: ./assets/Sink-or-be-Sunk/cadBoat.jpeg
      photo_title: Boat CAD Model
      photo_type: card card-wide

- layout: top-middle
  name: Hardware Control with Serial Parsing Microcontroller for Autonomous Racing
  link: https://web.ics.purdue.edu/~elgamala/AMP-VIP
  github: Autonomous-Motorsports-Purdue/AMP_MCUv1
  quote: >
    Arduino based microntroller program for controlling low level electronics of autonomous go kart
  description: | # this will include new lines to allow paragraphs
    The purpose of this project is to implement a serial parsing microcontroller system to operate the steering,
    throttle, and braking functionality of the Autonomous Motorsport Purdue (AMP) go-kart. Autonomous racing has
    grown in popularity as more teams work to solve the unique problem of autonomous decision making at very high
    speeds.  Our sub-team is working with the low-level electrical hardware on our modified go-kart, mainly focusing
    on parsing data from the onboard computer and distributing signals to other electronics such as the motor controller,
    linear actuator, and servos. To do this, the microcontroller receives custom serial packets from the go kart’s
    computer to enable and then control the steering angle, throttle intensity, and brake position. The steering angle
    is set with a pulse width modulated (PWM) signal from the microcontroller.  The throttle is controlled via the digital
    to analog converter (DAC) and the braking is set via digital signals. To reduce processing time the serial structure
    was designed to use byte long data instead of floating-point values because the microcontroller does not have dedicated
    floating-point hardware. Furthermore, we implemented various error handling methods for packet transmission such as
    cyclic redundancy check. This project is currently in its initial testing phase. We are testing the integration of our
    subsystems by controlling the serial input using a custom javascript-based simulator. The ultimate goal of this project
    is to have a fully autonomous go-kart that can navigate any track environment at the maximum speed possible.
  videos:
    - id: CATtHCXGsZI
      title: AMP Electrical Full Integration Demonstration
  photos:
    - photo: ./assets/AMP/AMP_Group.png
      photo_title: AMP Group Picture
      photo_type: card card-big
    - photo: ./assets/AMP/AMP_Kart.jpg
      photo_title: AMP Go-Kart Picture
      photo_type: card card-wide
    - photo: ./assets/AMP/AMP_PCB.png
      photo_title: AMP PCB Picture
      photo_type: card card
    - photo: ./assets/AMP/AMP_Expo_Certificate.png
      photo_title: AMP PCB Picture
      photo_type: card card
- layout: top-middle
  name: High Speed Force Sensor Datalogger
  # link: https://github.com/MArndt26/PNG_Datalogger
  github: MArndt26/PNG_Datalogger
  quote: >
    Datalogger for PNG Research using the Teensy 4.1 development board
  description: | # this will include new lines to allow paragraphs
    Purdue Neurological Group (PNG) is involved in many different research projects, one of which involves measuring the 
    effects of head trauma in athletes. More specifically, football helmet collisions. The goal of the project in regards 
    to this repository is to design and implement high-speed data collection circuitry to measure the forces that take place 
    during one of these football impacts (tackles). "Data collection circuitry" refers to the following:
      * A microcontroller to read in analog inputs through an ADC
      * Variable resistance strain gauges to measure forces
      * Analog multiplexers to route 6 different signals into the microcontroller
      * Differential amplifier / Wheatstone bridge to convert the sensor resistance changes into changes in voltage.
      * SD card to record the data

    My contribution to this effort involves designing and programming the force collecting circuitry.  There is a long history
    for this project that can be seen [here](https://github.com/MArndt26/PNG_Datalogger#project-history).
  photos:
    - photo: ./assets/png_datalogger/helmet_closeup.jpg
      photo_type: card
    - photo: ./assets/png_datalogger/bend_device.jpg
      photo_type: card
    - photo: ./assets/png_datalogger/breadboard.jpg
      photo_type: card card-big
    - photo: ./assets/png_datalogger/helmet_setup.jpg
      photo_type: card card-big
    - photo: ./assets/png_datalogger/strain_gauge_plot.jpg
      photo_type: card
    - photo: ./assets/png_datalogger/Data_Processed.jpg
      photo_type: card
- layout: top-middle
  name: Harmonize
  # link: https://github.com/MArndt26/PNG_Datalogger
  github: MArndt26/Harmonize
  quote: >
    Social media application aimed at connecting individuals with similar musical interests
  description: | # this will include new lines to allow paragraphs
    In the era of COVID and distance friendships, people need a method of connecting with individuals musically. 
    Even in the absence of COVID, it is difficult to meet people with similar music tastes willing to attend a 
    concert together.  With Harmonize users will be able to easily connect with people and explore their music tastes. 
    Unlike the vanilla services provided by Spotify, this will allow users to share their personal music style with 
    the world and foster new friendships along the way.  Harmonize is a one-stop-shop for online music socialization.
  photos:
    - photo: ./assets/Harmonize/navbar.png
      photo_title: User Homepage
      photo_type: card card-tall
    - photo: ./assets/Harmonize/user_homepage.png
      photo_title: User Homepage
      photo_type: card card-big
    - photo: ./assets/Harmonize/recommendation_dashboard.png
      photo_title: User Homepage
      photo_type: card card-big
    - photo: ./assets/Harmonize/music_groups_page.png
      photo_title: User Homepage
      photo_type: card card-tall

- layout: top-middle
  name: AMP Jetson Serial Simulator
  # link: https://github.com/Autonomous-Motorsports-Purdue/AMP-Jetson-Serial-Sim
  github: Autonomous-Motorsports-Purdue/AMP-Jetson-Serial-Sim
  quote: >
    Electron based serial simulator for testing serial communication between the Jetson and Arduino MCU.
  description: | # this will include new lines to allow paragraphs
    This Project is used to interface with the microcontroller for the Autonomous Motorsport Purdue go-kart. A key issue 
    for the AMP team is the allocation of resources between the sub-teams.  Due to the tight integration
    of our systems, both Electrical and Software sub-teams require access to the kart's main computer (Nvidia Jetson)
    and the electrical controller (Arduino MCU) for development/debugging tasks.  To solve this issue, I created 
    this Jetson Serial Simulator program.  This software takes the place of the Jetson which allows for full electrical
    integration testing, without the need to schedule time with the physical Jetson computer.
  videos:
    - id: daYhBjnEbTU
      title: AMP Jetson Serial Simulator Demonstration

- layout: top-middle
  name: Microcontroller Retro Game Console
  # link: https://github.com/MArndt26/E3-Auto-Dispenser
  github: MArndt26/MCU_Flappy_Bird
  quote: >
    Microcontroller Controlled Flappy Bird Game Console
  description: | # this will include new lines to allow paragraphs
    This project used multiple peripheral systems of a STM32 microcontroller to recreate the infamous flappy bird game.
    The system shows the main content through an LCD display controlled through SPI communication with the microcontroller.
    There is also an additional 7 segment display to update the user's score.  Finally, game music (the Tetris Theme Song)
    is output to the user by passing a variable duty cycle PWM signal through a hardware low pass filter.
  photos:
    - photo: ./assets/Flappy/full_board.jpg
      photo_title: box external
      photo_type: card card-big
    - photo: ./assets/Flappy/screen.jpg
      photo_title: box internal
      photo_type: card card-tall
    - photo: ./assets/Flappy/score.jpg
      photo_title: Adheasive Pump
      photo_type: card
  videos:
    - id: S5TemZ1Fc4k
      title: Flappy Bird Game Console Demonstration

- layout: top-middle
  name: E3 Auto Adhesive Dispenser
  # link: https://github.com/MArndt26/E3-Auto-Dispenser
  github: MArndt26/E3-Auto-Dispenser
  quote: >
    Automated Control System for Display Adhesive Dispenser
  description: | # this will include new lines to allow paragraphs
    This Project is used to create a control pad and scale to dispense adhesive until a weight limit is reached.
    E3 Displays uses various manufacturing processes when fabricating the customized display stacks for its customers.
    One of these processes involves using precise amounts of adhesive for bonding displays to cover glass.  In the past,
    this has been a manual process, requiring operators to spend large amounts of time preparing the adhesive for the bonding
    process.  This project automates this by bundling all the prep work into one location, controlled electronically.
  photos:
    - photo: ./assets/E3/cart.jpg
      photo_title: cart
      photo_type: card card-tall
    - photo: ./assets/E3/box_internal.jpg
      photo_title: box internal
      photo_type: card card-big
    - photo: ./assets/E3/pump.jpg
      photo_title: Adhesive Pump
      photo_type: card card-tall

  videos:
    - id: TZbIzYgnOPE
      title: E3 Adhesive Dispenser Demo
